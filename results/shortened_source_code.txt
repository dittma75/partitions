/* File:   main.c
 * Author: Kevin Dittmar
 * Created on July 8, 2014 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <gmp.h>
#include "least_part_m.h"
mpz_t cache[1000000];
int main(int argc, char** argv) {
    if (argc != 3) {
        printf("Usage: partitions.exe m n");
        exit(EXIT_FAILURE);}
    printf("m= %s; n = %s\n", argv[1], argv[2]);
    mpz_t result;
    mpz_init(result);
    generate();
    h(result, atoi(argv[1]) , atoi(argv[2]));
    gmp_printf("%Zd\n", result);
    return (EXIT_SUCCESS);}
/* File:   least_part_m.c
 * Author: Kevin Dittmar
 * Created on July 9, 2014*/
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <gmp.h>
#include "least_part_m.h"
#include "h_function_generator.h"
mpz_t cache[50][20000];
int is_loaded[50];
/* Calculate h(m,n) and return the result in the out-parameter result
 * mpz_t result is an GMP integer out-parameter to store the number of
 * partitions with least part m for number n
 * int m is the least part of the partition
 * int n is the number to partition*/
void h(mpz_t result, int m, int n) {
    mpz_init(result);
    for (int i = 0; i < 50; i++){
        //Initialize is_loaded array.
        is_loaded[i] = 0;
        //Initialize cache array
        for (int j = 0; j < 20000; j++) { mpz_init(cache[i][j]); }}    
    //Cases where there is only one partition.
    if ((n == m) || (n >= (m * 2) && n < (m * 3))) { mpz_set_ui(result, 1); }
    //3m == n yields exactly two unique partitions.
    else if ((m * 3) == n) { mpz_set_ui(result, 2); }
    //There are no partitions possible with these rules.
    else if((n < m)||(n <= 0)||(m < 0) ||((2 * m) > n)){mpz_set_ui(result, 0);}
    //Unrestricted partition.
    else if (m == 0) { cacheLookup(result, n + 1); }
    //Base case partition.
    else if (m == 1) { cacheLookup(result, n); }
    //Sum of base case partitions after decomposition.
    else {
        hFunctionGenerator(m, n);
        //Can be decomposed into parts through the recurrence relation, or
        //is already in the form h(1,n).
        FILE *function_file;
        //Get the leaves of the function tree that was generated earlier.
        function_file = fopen("function_tree.txt", "r");
        if (function_file == NULL) {
            printf("Error:  Cannot find function_tree.txt");
            exit(1);}
        mpz_t value;
        mpz_init(value);
        int read_n;
        // k is the number of leaves of the h(m, n) tree that have been read.
        int k = 0;
        // Evaluate h(m, n) as the sum of all of the h(1, x(k)) leaves
        while (fscanf(function_file, "%d;", &read_n) > 0) {
            if (read_n != 0) {
                cacheLookup(value, read_n);
                if (e(k) == 1) { mpz_add(result, result, value); }
                else { mpz_sub(result, result, value); } }
            k++; }}}
/* Get h(1, n) from our cache of the first million h(1, n) values
 * int n is the number to find h(1, n) for.
 * mpz_t result is the GMP integer out-parameter for storing the h(1, n)
 * found */
void cacheLookup(mpz_t result, int n) {
    //The cache stores p(n) for 1 <= n <= 1,000,000, but array indices
    //start at 0.
    n -= 1;
    if (!is_loaded[n / 20000]) { initializeSegment(n / 20000); }
    mpz_set(result, cache[n / 20000][n % 20000]); }
/* Load a needed segment of the cache of unrestricted partition numbers 
 * into memory.
 * int index is the number in the filename of the cache file to be loaded. */
void initializeSegment(int index) {
    FILE *file;
    char* name = "cachedir/h_cache_";
    char* extension = ".txt";
    char filename[32];
    int i = 0;
    mpz_t value;
    mpz_init(value);
    sprintf(filename, "%s%d%s", name, index, extension);
    file = fopen(filename, "r");
    while (gmp_fscanf(file, "%Zd\n", value) > 0) {
        mpz_set(cache[index][i], value);
        i++;}
    fclose(file);}
/* Corresponds to e(k) in the paper, which is the function that finds
 * the sign of the kth leaf in the tree for some h(m, n). */
int e(int k) {
    if (k == 0) { return 1; }
    else if (k == 1) { return -1; } 
    return -1 * e(k - pow(2, floor(log2(k)))); }
/* File:   h_function_generator.c
 * Author: Kevin Dittmar
 * Created on July 8, 2014 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "h_function_generator.h"
/* Pre:  1 <= m <= n
 * Generate a function_tree.txt file that the rest of the
 * program can use to count the number of partitions.
 * int m is the least part of the partition
 * int n is the number to partition
 * return EXIT_SUCCESS if completed successfully, EXIT_FAILURE otherwise */
int hFunctionGenerator(int m, int n) {
    FILE *file;
    double epsilon = .000001;
    double numbers = pow(2, m - 1);
    double counter = 0;
    int original = n - (m - 1);
    file = fopen("function_tree.txt", "w");
    if (file == NULL) {
        printf("Error:  Can't write file.  Make sure function_tree.txt is closed.");
        return (EXIT_FAILURE); }
    if (numbers > 4) {
        for (int offset = 0; offset < 3; offset++) {
            fprintf(file, "%d;", original - offset);
            counter++; }
        fprintf(file, "0;");
        counter++; }
    //Special case for no decomposition.
    else if (numbers == 1) { fprintf(file, "%d;", original); }
    //Special case for 2 decomposition functions.
    else if (numbers == 2) {
        fprintf(file, "%d;", original);
        fprintf(file, "%d;", original - 1); }
    //Special case for 4 decomposition functions.
    else if (numbers == 4) {
        for (int offset = 0; offset < 4; offset++) {
            fprintf(file, "%d;", original - offset);
            counter++; }}
    for (int k = 4; k < numbers; k+=4) {
        double k_left = k;
        int decrement = 0;
        while ((k_left - epsilon) > 0 ) {
            int exponent = 0;
            int power = 1;
            //Get the largest exponent that can fit in k.
            while ((power * 4) <= k_left) {
                power *= 4;
                exponent++; }
            int amount_of_power = k_left / power;
            k_left -= amount_of_power * power;
            /*Example: exponent is 16, amount_of_power is 1
             *We decrement by 16's special number, which is 5, or 2(2) + 1; */
            if (amount_of_power == 1) { decrement += 2 * exponent + 1; }
            /*exponent is 16, amount_of_power is 2
             *We decrement by a 16 jump's amount, which is 5, or 2(2)+1.
             *Then, we decrement by an additional 1, so 6, or (2(2)+1)+1*/
            if (amount_of_power == 2) { decrement += (2 * exponent + 1) + 1; }
            /*exponent is 16, amount_of_power is 3
             *We want to decrement by 16's special number, which is 5, or 2(2)+1.
             *Then, we want to decrement by an additional 1, so 6, or (2(2)+1)+1.
             *Last, we want to decrement by 16's special number again, which is
             *another 5, so 11, or 2(2(2)+1)+1 */
            if (amount_of_power == 3) {decrement += 2*((2*exponent)+1)+1;}}
        if (numbers > 8) {
            for (int offset = 0; offset < 4; offset++) {
                /*Given the following grid for blocks of 16 numbers:
                 *00;01;02;03;
                 *04;05;06;07;
                 *08;09;10;11;
                 *12;13;14;15;
                 *Numbers 3, 4, 5, 7, 8, 10, 11, and 12 cancel with each other.
                 */
                if (doubleModCheck(counter, 16.0, 3.0) ||
                    doubleModCheck(counter, 16.0, 4.0) ||
                    doubleModCheck(counter, 16.0, 5.0) ||
                    doubleModCheck(counter, 16.0, 7.0) ||
                    doubleModCheck(counter, 16.0, 8.0) ||
                    doubleModCheck(counter, 16.0, 10.0) ||
                    doubleModCheck(counter, 16.0, 11.0) ||
                    doubleModCheck(counter, 16.0, 12.0)) {fprintf(file, "0;");}
                else {fprintf(file, "%d;", original - (decrement + offset));}
                counter++;}}
        /* When there are exactly 8 numbers (this loop only fires if numbers > 4),
         * the fifth number will cancel with the fourth.*/
        else {
            fprintf(file, "0;");
            counter++;
            for (int offset = 1; offset < 4; offset++) {
                fprintf(file, "%d;", original - (decrement + offset));
                counter++;}}}
    fclose(file);
    return (EXIT_SUCCESS);}
/* Use law of changing bases to find log base 4 of x
 * int x is the number to take log base 4 of.
 * return log_4(x) */
double log4(int x) { return (log(x) / log(4)); }
/* double n is the number to test as an integer
 * return 1 if it's an integer, 0 otherwise.*/
int isInteger(double n) { return n - (double)(int)n == 0.0; }
/* This function is used to figure out where in a block of 16 the number
 * specified by dividend is.
 * double dividend is the number to divide
 * double divisor is the number to divide by
 * double remainder is the remainder that we are expecting after the division.
 * returns 1 if dividend mod divisor has the given remainder, 0 otherwise */
int doubleModCheck(double dividend, double divisor, double remainder) {
    return isInteger((dividend - remainder) / divisor);}